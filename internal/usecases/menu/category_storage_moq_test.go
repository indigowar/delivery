// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package menu

import (
	"context"
	"github.com/google/uuid"
	"github.com/indigowar/delivery/internal/entities"
	"sync"
)

// Ensure, that CategoryStorageMock does implement CategoryStorage.
// If this is not the case, regenerate this file with moq.
var _ CategoryStorage = &CategoryStorageMock{}

// CategoryStorageMock is a mock implementation of CategoryStorage.
//
//	func TestSomethingThatUsesCategoryStorage(t *testing.T) {
//
//		// make and configure a mocked CategoryStorage
//		mockedCategoryStorage := &CategoryStorageMock{
//			AddFunc: func(ctx context.Context, category *entities.Category) (*entities.Category, error) {
//				panic("mock out the Add method")
//			},
//			GetFunc: func(ctx context.Context, id uuid.UUID) (*entities.Category, error) {
//				panic("mock out the Get method")
//			},
//			GetByRestaurantFunc: func(ctx context.Context, id uuid.UUID) ([]*entities.Category, error) {
//				panic("mock out the GetByRestaurant method")
//			},
//			GetSetFunc: func(ctx context.Context, ids uuid.UUIDs) ([]*entities.Category, error) {
//				panic("mock out the GetSet method")
//			},
//			RemoveFunc: func(ctx context.Context, id uuid.UUID) (*entities.Category, error) {
//				panic("mock out the Remove method")
//			},
//		}
//
//		// use mockedCategoryStorage in code that requires CategoryStorage
//		// and then make assertions.
//
//	}
type CategoryStorageMock struct {
	// AddFunc mocks the Add method.
	AddFunc func(ctx context.Context, category *entities.Category) (*entities.Category, error)

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, id uuid.UUID) (*entities.Category, error)

	// GetByRestaurantFunc mocks the GetByRestaurant method.
	GetByRestaurantFunc func(ctx context.Context, id uuid.UUID) ([]*entities.Category, error)

	// GetSetFunc mocks the GetSet method.
	GetSetFunc func(ctx context.Context, ids uuid.UUIDs) ([]*entities.Category, error)

	// RemoveFunc mocks the Remove method.
	RemoveFunc func(ctx context.Context, id uuid.UUID) (*entities.Category, error)

	// calls tracks calls to the methods.
	calls struct {
		// Add holds details about calls to the Add method.
		Add []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Category is the category argument value.
			Category *entities.Category
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// GetByRestaurant holds details about calls to the GetByRestaurant method.
		GetByRestaurant []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// GetSet holds details about calls to the GetSet method.
		GetSet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ids is the ids argument value.
			Ids uuid.UUIDs
		}
		// Remove holds details about calls to the Remove method.
		Remove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
	}
	lockAdd             sync.RWMutex
	lockGet             sync.RWMutex
	lockGetByRestaurant sync.RWMutex
	lockGetSet          sync.RWMutex
	lockRemove          sync.RWMutex
}

// Add calls AddFunc.
func (mock *CategoryStorageMock) Add(ctx context.Context, category *entities.Category) (*entities.Category, error) {
	if mock.AddFunc == nil {
		panic("CategoryStorageMock.AddFunc: method is nil but CategoryStorage.Add was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Category *entities.Category
	}{
		Ctx:      ctx,
		Category: category,
	}
	mock.lockAdd.Lock()
	mock.calls.Add = append(mock.calls.Add, callInfo)
	mock.lockAdd.Unlock()
	return mock.AddFunc(ctx, category)
}

// AddCalls gets all the calls that were made to Add.
// Check the length with:
//
//	len(mockedCategoryStorage.AddCalls())
func (mock *CategoryStorageMock) AddCalls() []struct {
	Ctx      context.Context
	Category *entities.Category
} {
	var calls []struct {
		Ctx      context.Context
		Category *entities.Category
	}
	mock.lockAdd.RLock()
	calls = mock.calls.Add
	mock.lockAdd.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *CategoryStorageMock) Get(ctx context.Context, id uuid.UUID) (*entities.Category, error) {
	if mock.GetFunc == nil {
		panic("CategoryStorageMock.GetFunc: method is nil but CategoryStorage.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, id)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedCategoryStorage.GetCalls())
func (mock *CategoryStorageMock) GetCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// GetByRestaurant calls GetByRestaurantFunc.
func (mock *CategoryStorageMock) GetByRestaurant(ctx context.Context, id uuid.UUID) ([]*entities.Category, error) {
	if mock.GetByRestaurantFunc == nil {
		panic("CategoryStorageMock.GetByRestaurantFunc: method is nil but CategoryStorage.GetByRestaurant was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByRestaurant.Lock()
	mock.calls.GetByRestaurant = append(mock.calls.GetByRestaurant, callInfo)
	mock.lockGetByRestaurant.Unlock()
	return mock.GetByRestaurantFunc(ctx, id)
}

// GetByRestaurantCalls gets all the calls that were made to GetByRestaurant.
// Check the length with:
//
//	len(mockedCategoryStorage.GetByRestaurantCalls())
func (mock *CategoryStorageMock) GetByRestaurantCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockGetByRestaurant.RLock()
	calls = mock.calls.GetByRestaurant
	mock.lockGetByRestaurant.RUnlock()
	return calls
}

// GetSet calls GetSetFunc.
func (mock *CategoryStorageMock) GetSet(ctx context.Context, ids uuid.UUIDs) ([]*entities.Category, error) {
	if mock.GetSetFunc == nil {
		panic("CategoryStorageMock.GetSetFunc: method is nil but CategoryStorage.GetSet was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ids uuid.UUIDs
	}{
		Ctx: ctx,
		Ids: ids,
	}
	mock.lockGetSet.Lock()
	mock.calls.GetSet = append(mock.calls.GetSet, callInfo)
	mock.lockGetSet.Unlock()
	return mock.GetSetFunc(ctx, ids)
}

// GetSetCalls gets all the calls that were made to GetSet.
// Check the length with:
//
//	len(mockedCategoryStorage.GetSetCalls())
func (mock *CategoryStorageMock) GetSetCalls() []struct {
	Ctx context.Context
	Ids uuid.UUIDs
} {
	var calls []struct {
		Ctx context.Context
		Ids uuid.UUIDs
	}
	mock.lockGetSet.RLock()
	calls = mock.calls.GetSet
	mock.lockGetSet.RUnlock()
	return calls
}

// Remove calls RemoveFunc.
func (mock *CategoryStorageMock) Remove(ctx context.Context, id uuid.UUID) (*entities.Category, error) {
	if mock.RemoveFunc == nil {
		panic("CategoryStorageMock.RemoveFunc: method is nil but CategoryStorage.Remove was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockRemove.Lock()
	mock.calls.Remove = append(mock.calls.Remove, callInfo)
	mock.lockRemove.Unlock()
	return mock.RemoveFunc(ctx, id)
}

// RemoveCalls gets all the calls that were made to Remove.
// Check the length with:
//
//	len(mockedCategoryStorage.RemoveCalls())
func (mock *CategoryStorageMock) RemoveCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockRemove.RLock()
	calls = mock.calls.Remove
	mock.lockRemove.RUnlock()
	return calls
}
