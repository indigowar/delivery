// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package accounts

import (
	"context"
	"net/url"
	"sync"
)

// Ensure, that ImageStorageMock does implement ImageStorage.
// If this is not the case, regenerate this file with moq.
var _ ImageStorage = &ImageStorageMock{}

// ImageStorageMock is a mock implementation of ImageStorage.
//
//	func TestSomethingThatUsesImageStorage(t *testing.T) {
//
//		// make and configure a mocked ImageStorage
//		mockedImageStorage := &ImageStorageMock{
//			AddFunc: func(ctx context.Context, image []byte) (*url.URL, error) {
//				panic("mock out the Add method")
//			},
//		}
//
//		// use mockedImageStorage in code that requires ImageStorage
//		// and then make assertions.
//
//	}
type ImageStorageMock struct {
	// AddFunc mocks the Add method.
	AddFunc func(ctx context.Context, image []byte) (*url.URL, error)

	// calls tracks calls to the methods.
	calls struct {
		// Add holds details about calls to the Add method.
		Add []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Image is the image argument value.
			Image []byte
		}
	}
	lockAdd sync.RWMutex
}

// Add calls AddFunc.
func (mock *ImageStorageMock) Add(ctx context.Context, image []byte) (*url.URL, error) {
	if mock.AddFunc == nil {
		panic("ImageStorageMock.AddFunc: method is nil but ImageStorage.Add was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Image []byte
	}{
		Ctx:   ctx,
		Image: image,
	}
	mock.lockAdd.Lock()
	mock.calls.Add = append(mock.calls.Add, callInfo)
	mock.lockAdd.Unlock()
	return mock.AddFunc(ctx, image)
}

// AddCalls gets all the calls that were made to Add.
// Check the length with:
//
//	len(mockedImageStorage.AddCalls())
func (mock *ImageStorageMock) AddCalls() []struct {
	Ctx   context.Context
	Image []byte
} {
	var calls []struct {
		Ctx   context.Context
		Image []byte
	}
	mock.lockAdd.RLock()
	calls = mock.calls.Add
	mock.lockAdd.RUnlock()
	return calls
}
