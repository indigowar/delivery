// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package auth

import (
	"context"
	"github.com/google/uuid"
	"github.com/indigowar/delivery/internal/entities"
	"sync"
)

// Ensure, that SessionStorageMock does implement SessionStorage.
// If this is not the case, regenerate this file with moq.
var _ SessionStorage = &SessionStorageMock{}

// SessionStorageMock is a mock implementation of SessionStorage.
//
//	func TestSomethingThatUsesSessionStorage(t *testing.T) {
//
//		// make and configure a mocked SessionStorage
//		mockedSessionStorage := &SessionStorageMock{
//			AddFunc: func(ctx context.Context, session *entities.Session) (*entities.Session, error) {
//				panic("mock out the Add method")
//			},
//			GetByIDFunc: func(ctx context.Context, id uuid.UUID) (*entities.Session, error) {
//				panic("mock out the GetByID method")
//			},
//			GetByTokenFunc: func(ctx context.Context, token entities.SessionToken) (*entities.Session, error) {
//				panic("mock out the GetByToken method")
//			},
//			RemoveFunc: func(ctx context.Context, token string) error {
//				panic("mock out the Remove method")
//			},
//			UpdateFunc: func(ctx context.Context, session *entities.Session) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedSessionStorage in code that requires SessionStorage
//		// and then make assertions.
//
//	}
type SessionStorageMock struct {
	// AddFunc mocks the Add method.
	AddFunc func(ctx context.Context, session *entities.Session) (*entities.Session, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, id uuid.UUID) (*entities.Session, error)

	// GetByTokenFunc mocks the GetByToken method.
	GetByTokenFunc func(ctx context.Context, token entities.SessionToken) (*entities.Session, error)

	// RemoveFunc mocks the Remove method.
	RemoveFunc func(ctx context.Context, token string) error

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, session *entities.Session) error

	// calls tracks calls to the methods.
	calls struct {
		// Add holds details about calls to the Add method.
		Add []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Session is the session argument value.
			Session *entities.Session
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// GetByToken holds details about calls to the GetByToken method.
		GetByToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token entities.SessionToken
		}
		// Remove holds details about calls to the Remove method.
		Remove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Session is the session argument value.
			Session *entities.Session
		}
	}
	lockAdd        sync.RWMutex
	lockGetByID    sync.RWMutex
	lockGetByToken sync.RWMutex
	lockRemove     sync.RWMutex
	lockUpdate     sync.RWMutex
}

// Add calls AddFunc.
func (mock *SessionStorageMock) Add(ctx context.Context, session *entities.Session) (*entities.Session, error) {
	if mock.AddFunc == nil {
		panic("SessionStorageMock.AddFunc: method is nil but SessionStorage.Add was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Session *entities.Session
	}{
		Ctx:     ctx,
		Session: session,
	}
	mock.lockAdd.Lock()
	mock.calls.Add = append(mock.calls.Add, callInfo)
	mock.lockAdd.Unlock()
	return mock.AddFunc(ctx, session)
}

// AddCalls gets all the calls that were made to Add.
// Check the length with:
//
//	len(mockedSessionStorage.AddCalls())
func (mock *SessionStorageMock) AddCalls() []struct {
	Ctx     context.Context
	Session *entities.Session
} {
	var calls []struct {
		Ctx     context.Context
		Session *entities.Session
	}
	mock.lockAdd.RLock()
	calls = mock.calls.Add
	mock.lockAdd.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *SessionStorageMock) GetByID(ctx context.Context, id uuid.UUID) (*entities.Session, error) {
	if mock.GetByIDFunc == nil {
		panic("SessionStorageMock.GetByIDFunc: method is nil but SessionStorage.GetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedSessionStorage.GetByIDCalls())
func (mock *SessionStorageMock) GetByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// GetByToken calls GetByTokenFunc.
func (mock *SessionStorageMock) GetByToken(ctx context.Context, token entities.SessionToken) (*entities.Session, error) {
	if mock.GetByTokenFunc == nil {
		panic("SessionStorageMock.GetByTokenFunc: method is nil but SessionStorage.GetByToken was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token entities.SessionToken
	}{
		Ctx:   ctx,
		Token: token,
	}
	mock.lockGetByToken.Lock()
	mock.calls.GetByToken = append(mock.calls.GetByToken, callInfo)
	mock.lockGetByToken.Unlock()
	return mock.GetByTokenFunc(ctx, token)
}

// GetByTokenCalls gets all the calls that were made to GetByToken.
// Check the length with:
//
//	len(mockedSessionStorage.GetByTokenCalls())
func (mock *SessionStorageMock) GetByTokenCalls() []struct {
	Ctx   context.Context
	Token entities.SessionToken
} {
	var calls []struct {
		Ctx   context.Context
		Token entities.SessionToken
	}
	mock.lockGetByToken.RLock()
	calls = mock.calls.GetByToken
	mock.lockGetByToken.RUnlock()
	return calls
}

// Remove calls RemoveFunc.
func (mock *SessionStorageMock) Remove(ctx context.Context, token string) error {
	if mock.RemoveFunc == nil {
		panic("SessionStorageMock.RemoveFunc: method is nil but SessionStorage.Remove was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token string
	}{
		Ctx:   ctx,
		Token: token,
	}
	mock.lockRemove.Lock()
	mock.calls.Remove = append(mock.calls.Remove, callInfo)
	mock.lockRemove.Unlock()
	return mock.RemoveFunc(ctx, token)
}

// RemoveCalls gets all the calls that were made to Remove.
// Check the length with:
//
//	len(mockedSessionStorage.RemoveCalls())
func (mock *SessionStorageMock) RemoveCalls() []struct {
	Ctx   context.Context
	Token string
} {
	var calls []struct {
		Ctx   context.Context
		Token string
	}
	mock.lockRemove.RLock()
	calls = mock.calls.Remove
	mock.lockRemove.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *SessionStorageMock) Update(ctx context.Context, session *entities.Session) error {
	if mock.UpdateFunc == nil {
		panic("SessionStorageMock.UpdateFunc: method is nil but SessionStorage.Update was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Session *entities.Session
	}{
		Ctx:     ctx,
		Session: session,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, session)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedSessionStorage.UpdateCalls())
func (mock *SessionStorageMock) UpdateCalls() []struct {
	Ctx     context.Context
	Session *entities.Session
} {
	var calls []struct {
		Ctx     context.Context
		Session *entities.Session
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
