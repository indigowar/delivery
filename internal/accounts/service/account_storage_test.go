// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"context"
	"github.com/google/uuid"
	"github.com/indigowar/delivery/internal/accounts/domain"
	"sync"
)

// Ensure, that AccountStorageMock does implement AccountStorage.
// If this is not the case, regenerate this file with moq.
var _ AccountStorage = &AccountStorageMock{}

// AccountStorageMock is a mock implementation of AccountStorage.
//
//	func TestSomethingThatUsesAccountStorage(t *testing.T) {
//
//		// make and configure a mocked AccountStorage
//		mockedAccountStorage := &AccountStorageMock{
//			AddFunc: func(ctx context.Context, account domain.Account) (*domain.Account, error) {
//				panic("mock out the Add method")
//			},
//			DeleteFunc: func(ctx context.Context, id uuid.UUID) error {
//				panic("mock out the Delete method")
//			},
//			GetFunc: func(ctx context.Context, id uuid.UUID) (*domain.Account, error) {
//				panic("mock out the Get method")
//			},
//			GetByPhoneFunc: func(ctx context.Context, phone string) (*domain.Account, error) {
//				panic("mock out the GetByPhone method")
//			},
//			UpdateFunc: func(ctx context.Context, account domain.Account) (*domain.Account, error) {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedAccountStorage in code that requires AccountStorage
//		// and then make assertions.
//
//	}
type AccountStorageMock struct {
	// AddFunc mocks the Add method.
	AddFunc func(ctx context.Context, account domain.Account) (*domain.Account, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, id uuid.UUID) error

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, id uuid.UUID) (*domain.Account, error)

	// GetByPhoneFunc mocks the GetByPhone method.
	GetByPhoneFunc func(ctx context.Context, phone string) (*domain.Account, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, account domain.Account) (*domain.Account, error)

	// calls tracks calls to the methods.
	calls struct {
		// Add holds details about calls to the Add method.
		Add []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Account is the account argument value.
			Account domain.Account
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// GetByPhone holds details about calls to the GetByPhone method.
		GetByPhone []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Phone is the phone argument value.
			Phone string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Account is the account argument value.
			Account domain.Account
		}
	}
	lockAdd        sync.RWMutex
	lockDelete     sync.RWMutex
	lockGet        sync.RWMutex
	lockGetByPhone sync.RWMutex
	lockUpdate     sync.RWMutex
}

// Add calls AddFunc.
func (mock *AccountStorageMock) Add(ctx context.Context, account domain.Account) (*domain.Account, error) {
	if mock.AddFunc == nil {
		panic("AccountStorageMock.AddFunc: method is nil but AccountStorage.Add was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Account domain.Account
	}{
		Ctx:     ctx,
		Account: account,
	}
	mock.lockAdd.Lock()
	mock.calls.Add = append(mock.calls.Add, callInfo)
	mock.lockAdd.Unlock()
	return mock.AddFunc(ctx, account)
}

// AddCalls gets all the calls that were made to Add.
// Check the length with:
//
//	len(mockedAccountStorage.AddCalls())
func (mock *AccountStorageMock) AddCalls() []struct {
	Ctx     context.Context
	Account domain.Account
} {
	var calls []struct {
		Ctx     context.Context
		Account domain.Account
	}
	mock.lockAdd.RLock()
	calls = mock.calls.Add
	mock.lockAdd.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *AccountStorageMock) Delete(ctx context.Context, id uuid.UUID) error {
	if mock.DeleteFunc == nil {
		panic("AccountStorageMock.DeleteFunc: method is nil but AccountStorage.Delete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedAccountStorage.DeleteCalls())
func (mock *AccountStorageMock) DeleteCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *AccountStorageMock) Get(ctx context.Context, id uuid.UUID) (*domain.Account, error) {
	if mock.GetFunc == nil {
		panic("AccountStorageMock.GetFunc: method is nil but AccountStorage.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, id)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedAccountStorage.GetCalls())
func (mock *AccountStorageMock) GetCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// GetByPhone calls GetByPhoneFunc.
func (mock *AccountStorageMock) GetByPhone(ctx context.Context, phone string) (*domain.Account, error) {
	if mock.GetByPhoneFunc == nil {
		panic("AccountStorageMock.GetByPhoneFunc: method is nil but AccountStorage.GetByPhone was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Phone string
	}{
		Ctx:   ctx,
		Phone: phone,
	}
	mock.lockGetByPhone.Lock()
	mock.calls.GetByPhone = append(mock.calls.GetByPhone, callInfo)
	mock.lockGetByPhone.Unlock()
	return mock.GetByPhoneFunc(ctx, phone)
}

// GetByPhoneCalls gets all the calls that were made to GetByPhone.
// Check the length with:
//
//	len(mockedAccountStorage.GetByPhoneCalls())
func (mock *AccountStorageMock) GetByPhoneCalls() []struct {
	Ctx   context.Context
	Phone string
} {
	var calls []struct {
		Ctx   context.Context
		Phone string
	}
	mock.lockGetByPhone.RLock()
	calls = mock.calls.GetByPhone
	mock.lockGetByPhone.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *AccountStorageMock) Update(ctx context.Context, account domain.Account) (*domain.Account, error) {
	if mock.UpdateFunc == nil {
		panic("AccountStorageMock.UpdateFunc: method is nil but AccountStorage.Update was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Account domain.Account
	}{
		Ctx:     ctx,
		Account: account,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, account)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedAccountStorage.UpdateCalls())
func (mock *AccountStorageMock) UpdateCalls() []struct {
	Ctx     context.Context
	Account domain.Account
} {
	var calls []struct {
		Ctx     context.Context
		Account domain.Account
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
